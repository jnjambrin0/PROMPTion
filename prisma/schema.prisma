// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")      // Para queries (pooler)
  directUrl = env("DIRECT_URL")        // Para migraciones (conexión directa)
}

// ==================== USUARIOS Y AUTENTICACIÓN ====================

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  username          String?  @unique
  fullName          String?  @map("full_name")
  avatarUrl         String?  @map("avatar_url")
  bio               String?
  
  // Integración con Supabase Auth
  authId            String   @unique @map("auth_id")
  
  // Metadata
  emailVerified     Boolean  @default(false) @map("email_verified")
  isActive          Boolean  @default(true) @map("is_active")
  lastActiveAt      DateTime? @map("last_active_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  workspaceMembers  WorkspaceMember[]
  ownedWorkspaces   Workspace[] @relation("WorkspaceOwner")
  prompts           Prompt[]
  promptVersions    PromptVersion[]
  blocks            Block[]
  evaluations       Evaluation[]
  aiAgents          AIAgent[]
  rules             Rule[]
  comments          Comment[]
  activities        Activity[]
  collaborations    Collaboration[]
  favorites         Favorite[]
  
  @@index([email])
  @@index([authId])
  @@map("users")
}

// ==================== WORKSPACES Y ORGANIZACIÓN ====================

model Workspace {
  id                String   @id @default(uuid())
  name              String
  slug              String   @unique
  description       String?
  logoUrl           String?  @map("logo_url")
  
  // Configuración
  settings          Json     @default("{}") // Configuraciones del workspace
  aiConfig          Json     @default("{}") @map("ai_config") // Configuración de modelos AI por defecto
  
  // Plan y límites
  plan              WorkspacePlan @default(FREE)
  promptLimit       Int      @default(100) @map("prompt_limit")
  memberLimit       Int      @default(5) @map("member_limit")
  
  // Metadata
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  ownerId           String   @map("owner_id")
  owner             User     @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members           WorkspaceMember[]
  prompts           Prompt[]
  aiAgents          AIAgent[]
  rules             Rule[]
  categories        Category[]
  tags              Tag[]
  
  @@index([slug])
  @@index([ownerId])
  @@map("workspaces")
}

enum WorkspacePlan {
  FREE
  PRO
  TEAM
  ENTERPRISE
}

model WorkspaceMember {
  id                String   @id @default(uuid())
  role              MemberRole @default(MEMBER)
  permissions       Json     @default("[]") // Permisos específicos adicionales
  
  // Metadata
  joinedAt          DateTime @default(now()) @map("joined_at")
  lastActiveAt      DateTime? @map("last_active_at")
  
  // Relaciones
  userId            String   @map("user_id")
  workspaceId       String   @map("workspace_id")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, workspaceId])
  @@index([userId])
  @@index([workspaceId])
  @@map("workspace_members")
}

enum MemberRole {
  OWNER
  ADMIN
  EDITOR
  MEMBER
  VIEWER
}

// ==================== PROMPTS Y TEMPLATES ====================

model Prompt {
  id                String   @id @default(uuid())
  title             String
  slug              String
  description       String?
  icon              String?  // Emoji o ícono
  coverImage        String?  @map("cover_image")
  
  // Configuración del prompt
  isTemplate        Boolean  @default(false) @map("is_template")
  isPublic          Boolean  @default(false) @map("is_public")
  isPinned          Boolean  @default(false) @map("is_pinned")
  
  // Metadata AI
  aiModel           String?  @map("ai_model") // gpt-4, claude-3, etc.
  modelConfig       Json     @default("{}") @map("model_config") // temperature, max_tokens, etc.
  variables         Json     @default("[]") // Variables dinámicas del prompt
  
  // Estadísticas
  viewCount         Int      @default(0) @map("view_count")
  useCount          Int      @default(0) @map("use_count")
  forkCount         Int      @default(0) @map("fork_count")
  averageScore      Float?   @map("average_score")
  
  // Versionado
  currentVersion    Int      @default(1) @map("current_version")
  
  // Soft delete
  deletedAt         DateTime? @map("deleted_at")
  
  // Metadata
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  lastUsedAt        DateTime? @map("last_used_at")
  
  // Relaciones
  userId            String   @map("user_id")
  workspaceId       String   @map("workspace_id")
  categoryId        String?  @map("category_id")
  parentId          String?  @map("parent_id") // Para forks
  
  user              User     @relation(fields: [userId], references: [id])
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  category          Category? @relation(fields: [categoryId], references: [id])
  parent            Prompt?  @relation("PromptForks", fields: [parentId], references: [id])
  
  // Relaciones inversas
  blocks            Block[]
  versions          PromptVersion[]
  evaluations       Evaluation[]
  tags              PromptTag[]
  collaborations    Collaboration[]
  comments          Comment[]
  favorites         Favorite[]
  forks             Prompt[] @relation("PromptForks")
  activities        Activity[]
  
  @@unique([workspaceId, slug])
  @@index([userId])
  @@index([workspaceId])
  @@index([categoryId])
  @@index([deletedAt])
  @@map("prompts")
}

model PromptVersion {
  id                String   @id @default(uuid())
  version           Int
  title             String
  changeLog         String?  @map("change_log")
  
  // Snapshot del contenido
  content           Json     // Snapshot completo del contenido y bloques
  modelConfig       Json     @map("model_config")
  variables         Json
  
  // Metadata
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relaciones
  promptId          String   @map("prompt_id")
  userId            String   @map("user_id")
  
  prompt            Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id])
  
  @@unique([promptId, version])
  @@index([promptId])
  @@index([userId])
  @@map("prompt_versions")
}

// ==================== SISTEMA DE BLOQUES (TIPO NOTION) ====================

model Block {
  id                String   @id @default(uuid())
  type              BlockType
  content           Json     // Contenido flexible según el tipo
  properties        Json     @default("{}") // Propiedades adicionales del bloque
  
  // Posicionamiento y jerarquía
  position          Int
  indentLevel       Int      @default(0) @map("indent_level")
  
  // Metadata
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  promptId          String   @map("prompt_id")
  parentId          String?  @map("parent_id")
  userId            String   @map("user_id")
  
  prompt            Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  parent            Block?   @relation("BlockHierarchy", fields: [parentId], references: [id])
  user              User     @relation(fields: [userId], references: [id])
  
  // Relaciones inversas
  children          Block[]  @relation("BlockHierarchy")
  
  @@index([promptId, position])
  @@index([parentId])
  @@map("blocks")
}

enum BlockType {
  TEXT
  HEADING
  PROMPT
  CODE
  VARIABLE
  DIVIDER
  TOGGLE
  CALLOUT
  QUOTE
  BULLET_LIST
  NUMBERED_LIST
  TODO
  IMAGE
  VIDEO
  FILE
  EMBED
  TABLE
  MARKDOWN
}

// ==================== AI AGENTS Y RULES ====================

model AIAgent {
  id                String   @id @default(uuid())
  name              String
  slug              String
  description       String?
  type              AgentType
  
  // Configuración
  systemPrompt      String?  @map("system_prompt")
  config            Json     @default("{}") // Configuración específica del agente
  capabilities      String[] // Lista de capacidades
  
  // Metadata
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  userId            String   @map("user_id")
  workspaceId       String   @map("workspace_id")
  
  user              User     @relation(fields: [userId], references: [id])
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  // Relaciones inversas
  rules             Rule[]
  
  @@unique([workspaceId, slug])
  @@index([userId])
  @@index([workspaceId])
  @@map("ai_agents")
}

enum AgentType {
  CURSOR
  WINDSURF
  COPILOT
  CUSTOM
}

model Rule {
  id                String   @id @default(uuid())
  name              String
  fileName          String   @map("file_name") // .cursorrules, .windsurfrules, etc.
  content           String   @db.Text
  description       String?
  
  // Metadata
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  userId            String   @map("user_id")
  workspaceId       String   @map("workspace_id")
  agentId           String?  @map("agent_id")
  
  user              User     @relation(fields: [userId], references: [id])
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  agent             AIAgent? @relation(fields: [agentId], references: [id])
  
  @@index([userId])
  @@index([workspaceId])
  @@index([agentId])
  @@map("rules")
}

// ==================== EVALUACIONES Y SCORING ====================

model Evaluation {
  id                String   @id @default(uuid())
  
  // Resultados de evaluación
  scores            Json     // { accuracy: 8.5, relevance: 9.0, clarity: 7.5, etc. }
  overallScore      Float    @map("overall_score")
  feedback          String?  @db.Text
  
  // Configuración de evaluación
  evaluationType    EvaluationType @map("evaluation_type")
  testCases         Json     @default("[]") @map("test_cases")
  criteria          Json     @default("{}") // Criterios personalizados
  
  // Metadata del modelo evaluador
  evaluatorModel    String   @map("evaluator_model")
  evaluatorConfig   Json     @map("evaluator_config")
  
  // Costo y rendimiento
  executionTime     Int?     @map("execution_time") // milliseconds
  tokenUsage        Json?    @map("token_usage") // { input: 100, output: 50 }
  estimatedCost     Float?   @map("estimated_cost")
  
  // Metadata
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relaciones
  promptId          String   @map("prompt_id")
  userId            String   @map("user_id")
  
  prompt            Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id])
  
  @@index([promptId])
  @@index([userId])
  @@index([overallScore])
  @@map("evaluations")
}

enum EvaluationType {
  MANUAL
  AUTOMATED
  LLM_JUDGE
  A_B_TEST
  BENCHMARK
}

// ==================== CATEGORIZACIÓN Y TAGS ====================

model Category {
  id                String   @id @default(uuid())
  name              String
  slug              String
  description       String?
  icon              String?
  color             String?
  
  // Jerarquía
  parentId          String?  @map("parent_id")
  
  // Metadata
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  workspaceId       String   @map("workspace_id")
  
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  parent            Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  
  // Relaciones inversas
  children          Category[] @relation("CategoryHierarchy")
  prompts           Prompt[]
  
  @@unique([workspaceId, slug])
  @@index([workspaceId])
  @@index([parentId])
  @@map("categories")
}

model Tag {
  id                String   @id @default(uuid())
  name              String
  slug              String
  color             String?
  
  // Metadata
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relaciones
  workspaceId       String   @map("workspace_id")
  
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  // Relaciones inversas
  prompts           PromptTag[]
  
  @@unique([workspaceId, slug])
  @@index([workspaceId])
  @@map("tags")
}

model PromptTag {
  promptId          String   @map("prompt_id")
  tagId             String   @map("tag_id")
  
  prompt            Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  tag               Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([promptId, tagId])
  @@map("prompt_tags")
}

// ==================== COLABORACIÓN ====================

model Collaboration {
  id                String   @id @default(uuid())
  permission        CollaborationPermission
  
  // Metadata
  createdAt         DateTime @default(now()) @map("created_at")
  expiresAt         DateTime? @map("expires_at")
  
  // Relaciones
  promptId          String   @map("prompt_id")
  userId            String   @map("user_id")
  
  prompt            Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([promptId, userId])
  @@index([promptId])
  @@index([userId])
  @@map("collaborations")
}

enum CollaborationPermission {
  VIEW
  COMMENT
  EDIT
}

model Comment {
  id                String   @id @default(uuid())
  content           String   @db.Text
  
  // Thread support
  parentId          String?  @map("parent_id")
  resolved          Boolean  @default(false)
  resolvedAt        DateTime? @map("resolved_at")
  resolvedBy        String?  @map("resolved_by")
  
  // Metadata
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  promptId          String   @map("prompt_id")
  userId            String   @map("user_id")
  
  prompt            Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id])
  parent            Comment? @relation("CommentThread", fields: [parentId], references: [id])
  
  // Relaciones inversas
  replies           Comment[] @relation("CommentThread")
  
  @@index([promptId])
  @@index([userId])
  @@index([parentId])
  @@map("comments")
}

// ==================== FAVORITOS Y ACTIVIDAD ====================

model Favorite {
  id                String   @id @default(uuid())
  
  // Metadata
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relaciones
  userId            String   @map("user_id")
  promptId          String   @map("prompt_id")
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt            Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  
  @@unique([userId, promptId])
  @@index([userId])
  @@index([promptId])
  @@map("favorites")
}

model Activity {
  id                String   @id @default(uuid())
  type              ActivityType
  description       String
  metadata          Json     @default("{}") // Datos adicionales según el tipo
  
  // IP y dispositivo para auditoría
  ipAddress         String?  @map("ip_address")
  userAgent         String?  @map("user_agent")
  
  // Metadata
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relaciones
  userId            String   @map("user_id")
  promptId          String?  @map("prompt_id")
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt            Prompt?  @relation(fields: [promptId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([promptId])
  @@index([createdAt])
  @@map("activities")
}

enum ActivityType {
  PROMPT_CREATED
  PROMPT_UPDATED
  PROMPT_DELETED
  PROMPT_SHARED
  PROMPT_FORKED
  PROMPT_EVALUATED
  RULE_CREATED
  RULE_UPDATED
  AGENT_CONFIGURED
  MEMBER_INVITED
  MEMBER_REMOVED
}

// ==================== ÍNDICES PARA BÚSQUEDA ====================
// Nota: Estos se crearán con migraciones SQL personalizadas para búsqueda de texto completo
// CREATE INDEX idx_prompts_search ON prompts USING GIN(to_tsvector('english', title || ' ' || COALESCE(description, '')));
// CREATE INDEX idx_blocks_search ON blocks USING GIN(content jsonb_path_ops);